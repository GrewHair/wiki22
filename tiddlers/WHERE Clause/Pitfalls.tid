.hsk.tagged_diagram: [<currentTiddler>tags[]field:icon[_my/images/icons/diagram]]
.hsk.tagged_exemplar: [<currentTiddler>tags[]field:icon[_my/images/icons/exemplar]]
.hsk.tagged_feature: [<currentTiddler>tags[]field:icon[_my/images/icons/feature]]
.hsk.tagged_topic: [<currentTiddler>tags[]field:icon[_my/images/icons/topic]]
created: 20200613204608785
modified: 20200613204654562
tags: [[Learning SQL by Alan Beaulieu]]
title: WHERE Clause/Pitfalls
tmap.id: dac9891e-116d-411b-a8b9-5ea687f7f585
type: text/vnd.tiddlywiki

''Pitfalls:''

* When using the `!=` [[operator|SQL Comparison Operators]], if the compared [[Column]] (to the left of the operator) is allowed to have [[Nulls|Null in SQL]] in it, some [[Rows|Row]] that are of interest may slip though and be lost, because [[Null|Null in SQL]] is not a number and the server will not let it pass the filter. In order to prevent this behaviour, it is good practice to `OR` the condition with `IS NULL` like this:
*><$codeblock code="SELECT emp_id, fname, lname, superior_emp_id
FROM employee
WHERE superior_emp_id != 6 OR superior_emp_id IS NULL;
" language="sql"/>
* You can't place [[Aggregate Functions|SQL Aggregate Functions]] in the [[WHERE Clause]] - they should be placed in the [[HAVING Clause]] instead.
* When using the `NOT IN` or `<> ALL` operators to compare a value to a set of values, one must ensure that the set of values does not contain a [[Null|Null in SQL]] value, because the server equates the value on the lefthand side to each member of the set, and equating a value to [[Null|Null in SQL]] yields `unknown`. Thus the following query returns an empty set:
*><$codeblock code="SELECT emp_id, fname, lname, title
FROM employee
WHERE emp_id NOT IN (1, 2, NULL);
" language="sql"/>