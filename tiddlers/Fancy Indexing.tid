.hsk.tagged_diagram: [<currentTiddler>tags[]field:icon[_my/images/icons/diagram]]
.hsk.tagged_exemplar: [<currentTiddler>tags[]field:icon[_my/images/icons/exemplar]]
.hsk.tagged_feature: [<currentTiddler>tags[]field:icon[_my/images/icons/feature]]
.hsk.tagged_topic: [<currentTiddler>tags[]field:icon[_my/images/icons/topic]]
created: 20200713000221679
modified: 20210218071621188
tags: Numpy [[Python Data Science Handbook (Jake VanderPlas)]]
title: Fancy Indexing
tmap.id: 2a232410-65b1-4b21-b6ab-3a3c25532474
type: text/vnd.tiddlywiki

Consider the following array:

```python
import numpy as np
rand = np.random.RandomState(42)

x = rand.randint(100, size=10)
print(x)
```

```
[51 92 14 71 60 20 82 86 74 74]
```

Suppose we want to access three different elements of it. We could do it like this:

```python
[x[3], x[7], x[2]]
```

```
[71, 86, 14]
```

Or alternatively we could pass a single [[list|Python List]] or [[array|Numpy Array]] of indices to obtain the same result (i.e., use [[Fancy Indexing]]):

```python
ind = [3, 7, 4]
x[ind]
```

```
array([71, 86, 60])
```
<br>

[[Fancy Indexing]] has the following features:

* With [[Fancy Indexing]], the [[Shape|Numpy Array Shape]] of the result reflects the (possibly broadcasted - see the last bullet point) [[Shape|Numpy Array Shape]] of the //index [[arrays|Numpy Array]]//, not the [[Shape|Numpy Array Shape]] of the //[[array|Numpy Array]] being indexed//.
*><$codeblock code="
ind = np.array([[3, 7],
                [4, 5]])
x[ind]
" language="python"/>

*><$codeblock code="
array([[71, 86],
       [60, 20]])
"/>

* [[Fancy Indexing]] also works in multiple dimensions - just give a separate index array for each dimension of the array you're indexing!
*><$codeblock code="
X = np.arange(12).reshape((3, 4))
X
" language="python"/>
*><$codeblock code="
array([[0,  1,  2,  3],
       [4,  5,  6,  7],
       [8,  9, 10, 11]])
"/>
*><$codeblock code="
row = np.array([0, 1, 2])
col = np.array([2, 1, 3])
X[row, col]
" language="python"/>
*><$codeblock code="
array([2, 5, 11])
"/>

* In the above case, the pairing of indices in [[Fancy Indexing]] actually follows all the [[Broadcasting|Numpy Broadcasting]] rules:
*><$codeblock code="
X[row[:, np.newaxis], col]
" language="python"/>
*><$codeblock code="
array([[ 2,  1,  3],
       [ 6,  5,  7],
       [10,  9, 11]])
"/>
** E.g. if we just multiply the same two index arrays, we will see the similar shape and recognizable results:
**><$codeblock code="
row[:, np.newaxis] * col
" language="python"/>
**><$codeblock code="
array([[ 0,  0,  0],
       [ 2,  1,  3],
       [ 4,  2,  6]])
"/>