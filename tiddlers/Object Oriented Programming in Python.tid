created: 20200704224627021
modified: 20200704234827737
tags: Python [[Data Science from Scratch (Joel Grus)]]
title: Object Oriented Programming in Python
tmap.id: 1b3c2ddf-0f68-433f-a1db-b559f5295bde
type: text/vnd.tiddlywiki

Imagine we don't have `set`s built into [[Python]]. This example implements it:

```python
# by convention, we give classes PascalCase names
class Set:
    # these are the member functions
	# every one takes a first parameter "self" (another convention)
	# that refers to the particular Set object being used
		
	def __init__(self, values=None):
        """This is the constructor.
        It gets called when you create a new Set.
        You would use it like
        s1 = Set()            # empty set
        s2 = Set([1,2,2,3])   # initialize with values"""
				
        self.dict = {}        # each instance of Set has its own dict property
		                      # which is what we'll use to track memberships
        if values is not None:
            for value in values:
                self.add(value)
								
    def __repr__(self):
        """this is the string representation of a Set object
        if you type it at the Python prompt or pass it to str()"""
        return "Set: " + str(self.dict.keys())
				
    # we'll represent membership by being a key in self.dict with value True
    def add(self, value):
        self.dict[value] = True

    def contains(self, value):
        return value in self.dict

    def remove(self, value):
        del self.dict[value]
```

We will use it like this:

```python
s = Set([1, 2, 3])
s.add(4)
print s.contains(4)           # True
s.remove(3)
print s.contains(3)           # False