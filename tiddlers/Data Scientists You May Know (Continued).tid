.hsk.tagged_diagram: [<currentTiddler>tags[]field:icon[_my/images/icons/diagram]]
.hsk.tagged_exemplar: [<currentTiddler>tags[]field:icon[_my/images/icons/exemplar]]
.hsk.tagged_feature: [<currentTiddler>tags[]field:icon[_my/images/icons/feature]]
.hsk.tagged_topic: [<currentTiddler>tags[]field:icon[_my/images/icons/topic]]
created: 20200701143011185
modified: 20200704110655021
tags: [[Data Science from Scratch (Joel Grus)]]
title: Data Scientists You May Know (Continued)
tmap.id: 93a9e303-f866-4c85-b342-75d816651306
type: text/vnd.tiddlywiki

Suppose we now want to suggest friends not just based on mutual friends, but also based on mutual interests. Here is the list of interests in the form of a list of pairs `(user_id, interest)`:

```python
interests = [
	(0, "Hadoop"), (0, "Big Data"), (0, "HBase"), (0, "Java"),
	(0, "Spark"), (0, "Storm"), (0, "Cassandra"),
	(1, "NoSQL"), (1, "MongoDB"), (1, "Cassandra"), (1, "HBase"),
	(1, "Postgres"), (2, "Python"), (2, "scikit-learn"), (2, "scipy"),
	(2, "numpy"), (2, "statsmodels"), (2, "pandas"), (3, "R"), (3, "Python"),
	(3, "statistics"), (3, "regression"), (3, "probability"),
	(4, "machine learning"), (4, "regression"), (4, "decision trees"),
	(4, "libsvm"), (5, "Python"), (4, "R"), (5, "Java"), (5, "C++"),
	(5, "Haskell"), (5, "programming languages"), (6, "statistics"),
	(6, "probability"), (6, "mathematics"), (6, "theory"),
	(7, "machine learning"), (7, "scikit-learn"), (7, "Mahout"),
	(7, "neural networks"), (8, "neural networks"), (8, "deep learning"),
	(8, "Big Data"), (8, "artificial networks"), (9, "Hadoop"),
	(9, "Java"), (9, "Map Reduce"), (9, "Big Data")
]
```

One can build a function that searches this list to find users with a certain interest:

```python
def data_scientists_who_like(target_interest):
    return [user_id
           for user_id, user_interest in interests
           if user_interest == target_interest]
```

This may be inconvenient in cases when we have a lot of users and interests (or if we just want to do a lot of searches), so it would pay to build a [[dict]] that would store interests as keys, and lists of user ids as values:

```python
from collections import defaultdict

# keys are interests, values are lists of user_ids with that interest
user_ids_by_interest = defaultdict(list)

for user_id, interest in interests:
    user_ids_by_interest[interest].append(user_id)
```

and vice versa:

```python
# keys are user ids, values are lists of interests for that user_id
interests_by_user_id = defaultdict(list)

for user_id, interest in interests:
    interests_by_user_id[user_id].append(interest)
```

Now it's easy to find who has the most interests in common with a given user:

* Iterate over the user's interests
* For each interest, iterate over the other users with that interest
* Keep [[count|Counter]] of how many times we see each other user:

```python
def most_common_interests_with(user):
    return Counter(interested_user_id
                  for interest in interests_by_user_id[user["id"]]
                  for interested_user_id in user_ids_by_interest[interest]
                  if interested_user_id != user["id"])
```