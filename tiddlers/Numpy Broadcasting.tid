.hsk.tagged_diagram: [<currentTiddler>tags[]field:icon[_my/images/icons/diagram]]
.hsk.tagged_exemplar: [<currentTiddler>tags[]field:icon[_my/images/icons/exemplar]]
.hsk.tagged_feature: [<currentTiddler>tags[]field:icon[_my/images/icons/feature]]
.hsk.tagged_topic: [<currentTiddler>tags[]field:icon[_my/images/icons/topic]]
.hsk.transcludes: [[_my/images/png/numpy_broadcasting]][[_my/images/png/numpy/2-dimensional_function_via_broadcasting]][[numpy - functions of 2 variables using broadcasting.html]]
created: 20200116130503920
modified: 20210218071929674
tags: [[Python Data Science Handbook (Jake VanderPlas)]] Stub Numpy Pandas
title: Numpy Broadcasting
tmap.id: 11430eff-0e31-4e38-bcc5-9b467cd7e8d9
type: text/vnd.tiddlywiki

[[Broadcasting|Numpy Broadcasting]] is a set of rules for applying binary [[ufuncs]] on [[arrays|Numpy Array]] of different [[sizes|Numpy Array Size]].

{{_my/images/png/numpy_broadcasting}}

''Rules of [[Broadcasting|Numpy Broadcasting]]:''

# If the two [[arrays|Numpy Array]] differ in their number of dimensions, the shape of the one with fewer dimensions is //padded// with ones on its leading (left) side
# If the [[shape|Numpy Array Shape]] of the two [[arrays|Numpy Array]] does not match in some dimension, the [[array|Numpy Array]] with [[shape|Numpy Array Shape]] equal to 1 in that dimension is stretched to match the other [[shape|Numpy Array Shape]]
# If in any dimension the [[sizes|Numpy Array Size]] disagree and neither is equal to 1, an error is raised

''Note:'' the padding is only performed __on the left__, not on the right. The possibilily of right-padding would introduce ambiguity. If you want right-padding, just [[reshape|ndarray.reshape()]] your [[array|Numpy Array]](s) and do it on the left :)

<br>
''Example 1:''

* Let's make two arrays
*>`M = np.ones((2, 3))
a = np.arange(3)`

* Their shapes are:
*>`M.shape = (2, 3)
a.shape(3,)`

* By rule 1 `a` will be padded with ones:
*>`M.shape -> (2, 3)
a.shape -> (1, 3)`

* By rule 2, we now see that the first dimension disagrees, so we stretch this dimension to match:
*>`M.shape -> (2, 3)
a.shape -> (2, 3)`

* The shapes match, and the final shape is `(2, 3)`:
*>`In[1]: M + a
Out[1]: array([[ 1., 2., 3.],
               [ 1., 2., 3.]])`
<br>


''Example 2:''

* Here's an example where both arrays need to be broardcast:
*> `a = np.arange(3).reshape((3, 1))
b = np.arange(3)`

* Their shapes are:
*> `a.shape(3, 1)
b.shape(3,)`

* By rule 1 `b` should be padded:
*> `a.shape -> (3, 1)
b.shape -> (1, 3)`

* By rule 2 the dimensions with length 1 will be stretched:
*> `a.shape -> (3, 3)
b.shape -> (3, 3)`

* The shapes match, and the final shape is `(3, 3)`:
*> `In[2]: a + b
Out[2]: array([[0, 1, 2],
               [1, 2, 3],
               [2, 3, 4]])`

''Example 3:''

* Here's an example where the arrays are not compatible
*> `M = np.ones((3, 2))
a = np.arange(3)`

* Their shapes are:
*> `M.shape -> (3, 2)
a.shape -> (1, 3)`

* By rule 2, the first dimension of `a` is stretched:
*> `M.shape -> (3, 2)
a.shape -> (3, 3)`

* By rule 3, the final shapes do not match!
<br>

[[Broadcasting|Numpy Broadcasting]] is very useful for e.g. defining and plotting [[functions|Function]] of two or more variables:



@@color:red;''OLD Examples:''@@

* ''With a number''
`users['fees'] = 0` - and this `0` gets broadcast to the entire `'fees'` column.

* ''With a dict''
`heights = [ 59.0, 65.2, 62.9, 65.4 ]
data = {'height': heights, 'sex': 'M'}
results = pd.DataFrame(data)` - and the `M` is broadcast to the entire column.

In particular, [[Broadcasting|Numpy Broadcasting]] is useful to calculate [[Outer Products|Outer Product]] and their possible extensions (e.g. `np.outer` flattens input [[arrays|Numpy Array]], while[[Broadcasting|Numpy Broadcasting]] allows you to take one `(10, 2)` array, make a pair of arrays with shapes `(1, 10, 2)` and `(10, 1, 2)` out of it, and then make an `(10, 10, 2)`  "outer product" [[array|Numpy Array]])